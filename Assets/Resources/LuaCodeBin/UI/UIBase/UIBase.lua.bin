GEUI = CS.CSharp.GEUI
local uiMgr = require("UI/UIMgr")
__UIBaseTable__ = __UIBaseTable__ or {}
function __UIBaseTable__:create()
    if uiMgr.load_package(self.pkgName) == nil then
        print("load " .. self.pkgName .. " error")
        return
    end
    if self.mainComponent ~= nil then
        return
    end
    self.mainComponent = GEUI.CreateUIPanel(self.panelName, self.pkgName, self.comName)
end
function __UIBaseTable__:show()
    if self.isShow == true then
        return
    end
    if self.mainComponent == nil then
        return
    end
    self.isShow = GEUI.ShowUIPanel(self.panelName)
end
function __UIBaseTable__:hide()
    if(self.isShow == false) then
        return
    end
    GEUI.HideUIPanel(self.panelName)
    self.isShow = false
end
function __UIBaseTable__:after_create()
end
function __UIBaseTable__:after_show()
end
function __UIBaseTable__:get_child(...)
    local child = self.mainComponent
    for i, v in ipairs({...}) do
        child = child.GetChild(child, v)
        if(child == nil) then
            return nil
        end
    end
    return child
end
function __UIBaseTable__:bind_click_delegate(delegate, ...)
    local component = select(1, ...)
    if type(component) ~= "userdata" then
        component = self:get_child(...)
    end
    local delegate_proxy = CS.CSharp.BindLuaEvent.BindLuaEventFun(self, component, delegate)
    return delegate_proxy
end
function __UIBaseTable__:new(panelName, pkgName, comName)
    local panel = {
        panelName = panelName,
        pkgName = pkgName,
        comName = comName,
        isShow = false,
        mainComponent = nil
    }
    setmetatable(panel, {__index = self})
    uiMgr.reg_panel(panelName, panel)
    return panel
end
return __UIBaseTable__
